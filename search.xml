<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>如何编写一个llvm pass</title>
      <link href="/2024/07/23/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAllvm-pass/"/>
      <url>/2024/07/23/%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAllvm-pass/</url>
      
        <content type="html"><![CDATA[<h2 id="一-配置环境"><a href="#一-配置环境" class="headerlink" title="一.配置环境"></a>一.配置环境</h2><p>配置环境的话指路whitebird大佬的博客：</p><p><a href="https://whitebird0.github.io/post/%E4%BB%8Ellvm%E5%88%B0ollvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html">https://whitebird0.github.io/post/%E4%BB%8Ellvm%E5%88%B0ollvm%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0.html</a></p><p>或者llvm的官方文档<a href="https://llvm.org/docs/GettingStarted.html">https://llvm.org/docs/GettingStarted.html</a></p><h2 id="二-注意的点"><a href="#二-注意的点" class="headerlink" title="二.注意的点"></a>二.注意的点</h2><p>一个是whitebird博客中是使用clion对llvm进行编译，在编译过程中如果llvm是在虚拟机上的话要在clion的设置中将toolchain换一下，从windows换成wsl</p><p>二是大佬用的是旧版指令和编写llvm pass 的方式，新版已经不能使用他博客中的方式编写</p><h2 id="三-正式开始"><a href="#三-正式开始" class="headerlink" title="三.正式开始"></a>三.正式开始</h2><p>首先入门可以查看官方文档，根据官方文档进行llvm pass的编写</p><p>![](<a href="https://raw.githubusercontent.com/kw171/kw171.github.io/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE">https://raw.githubusercontent.com/kw171/kw171.github.io/img/屏幕截图</a> 2024-07-24 121209.png)</p><p>可以发现其实官方文档所写的helloworld.h已经被创建了，那么我们根据他再在该文件夹中创建一个encode.h</p><p>写出如下代码:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> LLVM_TRANSFORMS_UTILS_ENCODE_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LLVM_TRANSFORMS_UTILS_ENCODE_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/PassManager.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">namespace llvm &#123;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EncodePass</span> :</span> public PassInfoMixin&lt;EncodePass&gt; &#123;</span><br><span class="line">public:</span><br><span class="line">  PreservedAnalyses <span class="title function_">run</span><span class="params">(Function &amp;F, FunctionAnalysisManager &amp;AM)</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">&#125; <span class="comment">// namespace llvm</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// LLVM_TRANSFORMS_UTILS_ENCODE_H</span></span></span><br></pre></td></tr></table></figure><p>这段代码写完可能会有run标红，不用管，否则编译opt的时候会报错</p><p>然后再在llvm&#x2F;lib&#x2F;Transforms&#x2F;Utils中创建Encode.cpp,代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Transforms/Utils/Encode.h&quot;</span></span></span><br><span class="line">using namespace llvm;</span><br><span class="line">PreservedAnalyses <span class="title function_">EncodePass::run</span><span class="params">(Function &amp;F,</span></span><br><span class="line"><span class="params">                                      FunctionAnalysisManager &amp;AM)</span> &#123;</span><br><span class="line">  errs() &lt;&lt; F.getName() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">  <span class="keyword">return</span> PreservedAnalyses::all();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在llvm&#x2F;lib&#x2F;Transforms&#x2F;Utils的Cmakelists.txt中添加一个Encode.cpp</p><p>写完后在llvm&#x2F;lib&#x2F;Passes&#x2F;PassRegistry.def中添加如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">FUNCTION_PASS(&quot;encode&quot;,EncodePass())</span><br></pre></td></tr></table></figure><p>在llvm&#x2F;lib&#x2F;Passes&#x2F;PassBuilder.cpp添加</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;llvm/Transforms/Utils/Encode.h&quot;</span><br></pre></td></tr></table></figure><p>然后在clion中重新编译</p><p><img src="https://github.com/kw171/kw171.github.io/blob/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-25%20120615.png"></p><p>选择重新加载cmake项目</p><p>然后进入cmake-build-release文件夹重新编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ninja -j2 opt</span><br></pre></td></tr></table></figure><p>不过编译过程中我莫名其妙跳出来一个循环依赖问题</p><p><img src="https://github.com/kw171/kw171.github.io/blob/img/%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE%202024-07-25%20115432.png"></p><p>不过解决也很容易，只要在clion中进入lib&#x2F;support&#x2F;BLAKE3&#x2F;里面的cmakelists.txt，把最后一行和Encode.cpp有关的内容删除即可（虽然我还不知道有什么影响，不过好像没什么影响）</p><p>然后编译完成就可以使用opt将pass用于我们的IR代码上啦</p><h2 id="四-使用pass"><a href="#四-使用pass" class="headerlink" title="四.使用pass"></a>四.使用pass</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>name</title>
      <link href="/2024/01/19/name/"/>
      <url>/2024/01/19/name/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>my new page</title>
      <link href="/2024/01/19/my-new-page/"/>
      <url>/2024/01/19/my-new-page/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/01/19/hello-world/"/>
      <url>/2024/01/19/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
